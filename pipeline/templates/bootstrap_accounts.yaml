AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: deploys bootstrap resources for cross-account pipeline in target accounts. 
  
# Each target account should have this stack deployed before pipeline stack.
#
# This template creates:
# - S3 bucket for storing artifacts
# - IAM role for CodeBuild to deploy resources in target accounts
# - IAM policies for the role to access the bucket and create resources in target accounts

# it uses the assume-role method to safely manage infrastructure in target accounts
        # it uses the CodeStarSourceConnection to connect to the Git repository

Globals:
  Function:
    Timeout: 300

Parameters:
  Env:
    Description: Environment type.
    Type: String
    AllowedValues: [prod, dev, int]
    ConstraintDescription: must specify prod, dev, or int.

  Prefix:
    Description: project prefix
    Type: String
    Default: PORTFOLIO-

# some services like S3 dont allow uppercase letters in names
  PrefixLowercase:
    Description: project prefix
    Type: String
    Default: portfolio-

  AccountId:
    Description: AccountId of the target account where the pipeline will be deployed
    Type: String
    Default: 1111111111111

Resources:
# our bucket for storing artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${PrefixLowercase}-artifact-bucket-${Env}

  DeployerRole:
  # this role is assumed by CodeBuild service role of the pipeline account
  # It used by CodeBuild to deploy resources in target accounts
  # it has permissions to access the artifact bucket and create resources in target accounts
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Prefix}DeployerRole-${Env}
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::${AccountId}:role/codebuild-service-role-auto
            Action:
              - sts:AssumeRole

  AccessArtifactBucket:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeployerRole
      PolicyName: !Sub ${Prefix}AccessArtifactBucket-${Env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:GetEncryptionConfiguration
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !Sub arn:aws:s3:::${PrefixLowercase}artifact-bucket-${Env}
              - !Sub arn:aws:s3:::${PrefixLowercase}artifact-bucket-${Env}/*

            Effect: Allow
          # Here we allow DeployerRole to use a specific KMS key for encryption/decryption
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Resource:
              - !Sub arn:aws:kms:eu-west-1:${AWS::AccountId}:key/AWS_MANAGED_KEY
            Effect: Allow

  CreateResourcesPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeployerRole
      PolicyName: !Sub ${Prefix}CreateResourcesPolicy-${Env}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        # here we allow the DeployerRole to create policies needed by the final application
        # for example, to access S3 buckets, Lambda functions, RDS instances, etc.
          - Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${PrefixLowercase}input-${Env}*
              - !Sub arn:aws:s3:::${PrefixLowercase}output-${Env}*
            Effect: Allow

          - Action:
              - iam:*
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/${Prefix}*
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/${Prefix}*
            Effect: Allow

          - Action:
              - lambda:*
            Resource:
              - !Sub arn:aws:lambda:eu-west-1:${AWS::AccountId}:function:${Prefix}*
              - !Sub arn:aws:lambda:eu-west-1:${AWS::AccountId}:layer:*
              # allow using specific layers if needed
              - arn:aws:lambda:eu-west-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:24
            Effect: Allow
