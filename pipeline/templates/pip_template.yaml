AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "cross-account Pipeline for continuous deployment of an application"

# this stack deploys a single pipeline that deploys resources in two target accounts
# it creates:
# - S3 bucket for storing artifacts
# - IAM role for CodePipeline to deploy resources in target accounts
# - IAM policies for the role to access the bucket and create resources in target accounts
# - CodeBuild projects for building and deploying resources in target accounts
# - CodePipeline pipelines for deploying resources in target accounts



Globals:
  Function:
    Timeout: 300

Parameters:
  Prefix:
    Description: project prefix
    Type: String
    Default: pipeline-

  AccountId:
    Description: AccountId of the target account where the pipeline will be deployed
    Type: String
    Default: 1111111111111

  TargetAccountDev:
    Description: AccountId of the target account for DEV environment
    Type: String
    Default: 2111111111112

  TargetAccountProd:
    Description: AccountId of the target account for PROD environment
    Type: String
    Default: 3111111111113 

  TargetRoleDev:
    Description: Role name to be assumed` of the target account for DEV environment
    Type: String
    Default: Target-DeployerRole-dev  
  
  TargetRoleProd:
    Description: Role name of the target account for PROD environment
    Type: String
    Default: Target-DeployerRole-prod 

Resources:
# We make sure to create a new role each time we deploy the pipeline
  # this role is used by CodePipeline to deploy resources in target accounts ??????????
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: NewPipelineRoleAuto
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'

  PipelineTempPolicy: # why TEMP?
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PipelineTemp
      Roles:
        - !Ref PipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - codestar-connections:UseConnection
            Resource: arn:aws:codestar-connections:eu-west-1:${AccountId}:connection/8520c13f-d6df-4bfb-abd8-77605b5ac68d
            Effect: Allow

          - Action: # allows Git to load to S3 bucket
              - s3:*
            Resource: arn:aws:s3:::codepipeline-eu-west-1-*
            Effect: Allow

          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: !Sub arn:aws:cloudformation:eu-west-1:${AccountId}:stack/${Prefix}*
            Effect: Allow

          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource:
              - arn:aws:codebuild:eu-west-1:${AccountId}:build/pipeline-dev
              - arn:aws:codebuild:eu-west-1:${AccountId}:project/pipeline-dev

              - arn:aws:codebuild:eu-west-1:${AccountId}:build/pipeline-prod
              - arn:aws:codebuild:eu-west-1:${AccountId}:project/pipeline-prod

              - arn:aws:codebuild:eu-west-1:${AccountId}:project/pipeline-* # shuld cover all use cases


            Effect: Allow

          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"

  CodeBuildRole:
  # We make sure to create a new role each time we deploy the pipeline
    # this role assumes the DeployerRole in target accounts to deploy resources in target accounts
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: codebuild-service-role-auto
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'

  CodeBuildTempPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildTemp
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          # allows to write logs. very important for debugging
          - Effect: Allow
            Resource:
              - arn:aws:logs:eu-west-1:${AccountId}:log-group:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents

          - Effect: Allow
            Resource:
              - arn:aws:s3:::codepipeline-eu-west-1-*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
        
        # permissions to assume roles in target accounts
          - Action: sts:AssumeRole
            Resource:
              - !Sub arn:aws:iam::${TargetAccountDev}:role/TargetRoleDev
              - !Sub arn:aws:iam::${TargetAccountProd}:role/TargetRoleProd
            Effect: Allow

  CodeBuildMainDEV:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "pipeline-dev"
      Source:
      # this is the main project that builds and deploys resources in DEV environment
        # it uses the buildspec_dev.yaml file to build and deploy resources
        # it is triggered by the CodePipeline pipeline
        BuildSpec: "deployment/buildspec/buildspec_dev.yaml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: "pipeline-to-dev-auto"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache: 
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: "CODEBUILD_CONFIG_AUTO_DISCOVER"
            Type: "PLAINTEXT"
            Value: "true"
        Image: public.ecr.aws/amazonlinux/amazonlinux:2023
        ImagePullCredentialsType: "SERVICE_ROLE"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"

  CodeBuildMainPROD:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "pipeline-prod"
      Source:
        BuildSpec: "deployment/buildspec/buildspec_prod.yaml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: "pipeline-to-prod-auto"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache: 
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: "CODEBUILD_CONFIG_AUTO_DISCOVER"
            Type: "PLAINTEXT"
            Value: "true"
        Image: public.ecr.aws/amazonlinux/amazonlinux:2023
        ImagePullCredentialsType: "SERVICE_ROLE"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"

# adding other CodeBuild projects we could use the pipeline to deploy other repositories
# this is useful for deploying different components of the same application using the same pipeline
 