AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "cross account Pipeline for CAST"
Globals:
  Function:
    Timeout: 300
Resources:
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: NewPipelineTestRoleAuto
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'

  PipelineTempPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PipelineTemp
      Roles:
        - !Ref PipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            #check this out, what for ? can be furhter restricted
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
            # codecommit is actually used ?
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetRepository
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
            # codedeploy is actually used ?
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
            # restrict to resouce should work
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
            # why all these services ?
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow

          # restrict here 
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow

          # opswork?
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow

          # restrict here 

          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow

          # restrict here 
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: "*"
            Effect: Allow

          # devicefarm?
          - Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
            Effect: Allow

          # restrict here 
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"

          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"

          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"

          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:DescribeStateMachine
              - states:StartExecution
            Resource: "*"

          - Effect: Allow
            Action:
              - appconfig:StartDeployment
              - appconfig:StopDeployment
              - appconfig:GetDeployment
            Resource: "*"

  # remove managed policies
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: codebuild-service-role-auto
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"

  CodeBuildTempPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildTemp
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource:
              - arn:aws:logs:eu-west-1:214364534595:log-group:/aws/codebuild/dpp-dco-cast
              - arn:aws:logs:eu-west-1:214364534595:log-group:/aws/codebuild/dpp-dco-cast:*
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents

          - Effect: Allow
            Resource:
              - arn:aws:s3:::codepipeline-eu-west-1-*
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation

          - Action: sts:AssumeRole # role has to be created in other account
            Resource:
              # - arn:aws:iam::471685057907:role/cdk-cast-file-publishing-role-471685057907-eu-west-1
              - arn:aws:iam::471685057907:role/CAST-DeployerRole-dev
            Effect: Allow

          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource:
              - arn:aws:codebuild:eu-west-1:214364534595:report-group/dpp-dco-cast-*

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "dpp-dco-cast-to-dev-auto"
      Source:
        BuildSpec: "buildspec_dev.yaml"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: "dpp-dco-cast-to-dev-auto"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache: # consider using LOCAL SOURCE CACHE like here https://docs.aws.amazon.com/codebuild/latest/userguide/build-caching.html
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        EnvironmentVariables:
          - Name: "CODEBUILD_CONFIG_AUTO_DISCOVER"
            Type: "PLAINTEXT"
            Value: "true"
        Image: "public.ecr.aws/sam/build-python3.8:1.52.0-20220610003848"
        ImagePullCredentialsType: "SERVICE_ROLE"
        PrivilegedMode: false
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"

  CodePipelinePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: "CAST-simple-Test-CF"
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Location: !Sub "codepipeline-${AWS::Region}-922520304512"
        Type: "S3"
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Provider: "CodeStarSourceConnection"
                Version: "1"
              Configuration:
                BranchName: "dev"
                ConnectionArn: arn:aws:codestar-connections:eu-west-1:214364534595:connection/8520c13f-d6df-4bfb-abd8-77605b5ac68d
                DetectChanges: "true"
                FullRepositoryId: "dpp-clearingoffice/pipeline_test_repo"
                OutputArtifactFormat: "CODE_ZIP"
              OutputArtifacts:
                - Name: "SourceArtifact"
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "BuildDevTest"
          Actions:
            - Name: "builddevTest"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: "SourceArtifact"
              Region: !Ref AWS::Region
              RunOrder: 1
